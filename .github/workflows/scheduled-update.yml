name: Scheduled Data Update

on:
    schedule:
        # 매 시간 실행
        - cron: '0 * * * *'
    # 수동으로 워크플로우를 실행할 수 있도록 추가
    workflow_dispatch:
        inputs:
            Samples:
                required: true
                default: '4'
            RepetitionTime:
                required: true
                default: '50'
                description: '실행 기간 (분)'

# 동시에 최대 하나의 워크플로우만 실행되도록 설정
concurrency:
    group: scheduled-data-update
    cancel-in-progress: false

jobs:
    update-data:
        runs-on: ubuntu-latest
        steps:
            - name: Set Timezone
              uses: szenius/set-timezone@v2.0
              with:
                  timezoneLinux: 'Asia/Seoul'
                  timezoneMacos: 'Asia/Seoul'
                  timezoneWindows: 'Korea Standard Time'

            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  # Git 하위 모듈이 사용된 것 같으므로 하위 모듈도 체크아웃합니다
                  submodules: 'recursive'
                  # 전체 히스토리를 가져옵니다 (Git 작업에 필요)
                  fetch-depth: 0
                  persist-credentials: false

            - name: Set up Git credentials
              run: |
                  git config --global user.name "rycont"
                  git config --global user.email "reactdev@kakao.com"

            - name: Set up submodule push URL with token
              run: |
                  git config --global url."https://${{ secrets.MY_GITHUB_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

                  cd kobus-output
                  git remote set-url origin https://${{ secrets.MY_GITHUB_TOKEN }}:x-oauth-basic@github.com/rycont/operation-plan-kobus.git
                    
                  cd ../bustago-output
                  git remote set-url origin https://${{ secrets.MY_GITHUB_TOKEN }}:x-oauth-basic@github.com/rycont/operation-plan-bustago.git

                  cd ../cache
                  git remote set-url origin https://${{ secrets.MY_GITHUB_TOKEN }}:x-oauth-basic@github.com/rycont/timetable-parser-kobus-cache.git

                  # 원래 디렉토리로 복귀
                  cd ..

            - name: Install Deno
              uses: denoland/setup-deno@v1
              with:
                  deno-version: v2.x

            - name: Switch submodules to main branch
              run: |
                  cd kobus-output
                  git switch main
                  cd ../bustago-output
                  git switch main
                  cd ../cache
                  git switch main

            - uses: browser-actions/setup-chrome@v1
              id: setup-chrome

            - name: Repeat update script for ${{ github.event.inputs.RepetitionTime || 50 }} minutes
              run: |
                  run_for_min() {
                    local cmd="$1"
                    local end=$((SECONDS + ${{ github.event.inputs.RepetitionTime || 50 }} * 60))

                    while [ $SECONDS -lt $end ]; do
                      $cmd || echo "Command failed, retrying..."
                      sleep 1
                    done
                  }

                  update_kobus() {
                    run_for_min "deno run -A --unstable-temporal update-sample-kobus.ts"
                  }

                  update_bustago() {
                    run_for_min "deno run -A --unstable-temporal update-sample-bustago.ts"
                  }

                  update_kobus &
                  update_bustago &

                  wait

                  echo "Kobus and Bustago updates completed."

              env:
                  CHROME_PATH: ${{ steps.setup-chrome.outputs.chrome-path }}
                  UPDATE_SAMPLES: ${{ github.event.inputs.Samples || 4 }}

            - name: Remove Expired Caches
              run: |
                  deno run -A --unstable-temporal remove-old-caches.ts

            - name: Push to GitHub
              run: |
                  cd cache

                  if git add -A && git commit -m "Regular Data Update(Cache)" && git push origin; then
                    echo "Successfully updated Cache repository"
                  else
                    echo "No changes to commit in Cache"
                  fi

                  cd ../kobus-output

                  if git add -A && git commit -m "Regular Data Update(Kobus)" && git push origin; then
                    echo "Successfully updated Kobus repository"
                  else
                    echo "No changes to commit in Kobus"
                  fi

                  cd ../bustago-output

                  if git add -A && git commit -m "Regular Data Update(Bustago)" && git push origin; then
                    echo "Successfully updated Bustago repository"
                  else
                    echo "No changes to commit in Bustago"
                  fi
